/**
 * JavaScript Admin Functions - wpbooklist-search-frontend.min.js
 *
 * @author   Jake Evans
 * @category JavaScript
 * @package  Includes/Assets/Js
 * @version  6.0.0
 */

console.log( 'This is the JavaScript Object that holds all PHP Variables for use in JavaScript' );
console.log( wpbooklistSearchPhpVariables );


// All functions wrapped in jQuery(document ).ready()...
jQuery( document ).ready( function( $ ) {
	'use strict';

	/* BEGINNING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Function to submit the actual search.
	wpbooklistSearchSubmit();

	// Function to populate the search fields.
	wpbooklistSearchPopulate();

	// Function to reset the drop-down selections to the default disabled values.
	wpbooklistSearchResetDropdowns();

	// Function to reset the text field selections to the default empty values.
	wpbooklistSearchResetTextFields();

	// Function to revela the search form again.
	wpbooklistSearchRevealForm();

	/* ENDING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	function wpbooklistSearchRevealForm() {

		// When the 'Save' button is clicked.
		$( '#wpbooklist-search-show-form-button' ).on( 'click', function() {

			$( this ).css({'pointer-events': 'none'});
			$( this ).animate({'opacity': '0'});

			var searchForm = $( '#wpbooklist-search-controls-wrapper' );

			// Get Default Height
			var curHeight = searchForm.height();

			// Get Auto Height
			var autoHeight = searchForm.css( 'height', 'auto' ).height();

			// Reset to Default Height
			searchForm.height( curHeight );

			// Animate to Auto Height
			searchForm.stop().animate({
				height: autoHeight,
				opacity: '1'
			}, {
				duration: 1000,
				complete: function() {
					searchForm.css({'height': 'auto'});
				}
			});

		});

	}

	function wpbooklistSearchSubmit(){

		// When the Search form is submitted/the Search button is clicked
		$( '#wpbooklist-search-searchterm-form' ).on( 'submit', function() {

			event.preventDefault ? event.preventDefault() : event.returnValue = false;

			var keywords = $( '#wpbooklist-search-keywords' ).val();
			var keywordsDb = $( '#wpbooklist-search-keywords' ).attr( 'data-dbfieldname' );

			var title = $( '#wpbooklist-search-title' ).val();
			var titleDb = $( '#wpbooklist-search-title' ).attr( 'data-dbfieldname' );

			var author = $( '#wpbooklist-search-author' ).val();
			var authorDb = $( '#wpbooklist-search-author' ).attr( 'data-dbfieldname' );

			var isbn = $( '#wpbooklist-search-isbn' ).val();
			var isbnDb = $( '#wpbooklist-search-isbn' ).attr( 'data-dbfieldname' );

			var publisher = $( '#wpbooklist-search-publisher' ).val();
			var publisherDb = $( '#wpbooklist-search-publisher' ).attr( 'data-dbfieldname' );

			var series = $( '#wpbooklist-search-series' ).val();
			var seriesDb = $( '#wpbooklist-search-series' ).attr( 'data-dbfieldname' );

			var language = $( '#wpbooklist-search-language' ).val();
			var languageDb = $( '#wpbooklist-search-language' ).attr( 'data-dbfieldname' );

			var format = $( '#wpbooklist-search-format' ).val();
			var formatDb = $( '#wpbooklist-search-format' ).attr( 'data-dbfieldname' );

			var genres = $( '#wpbooklist-search-genres' ).val();
			var genresDb = $( '#wpbooklist-search-genres' ).attr( 'data-dbfieldname' );

			var subgenre = $( '#wpbooklist-search-subgenre' ).val();
			var subgenreDb = $( '#wpbooklist-search-subgenre' ).attr( 'data-dbfieldname' );

			var ratingTerm = $( '#wpbooklist-search-rating-year-term' ).val();

			var sortBy = $( '#wpbooklist-search-sortby' ).val();

			if ( 'Greater Than' === ratingTerm ) {
				ratingTerm = 'Greater';
			}

			if ( 'Less Than' === ratingTerm ) {
				ratingTerm = 'Less';
			}

			var ratingYear = $( '#wpbooklist-search-rating' ).val();
			var ratingYearDb = $( '#wpbooklist-search-rating' ).attr( 'data-dbfieldname' );

			var pubTerm = $( '#wpbooklist-search-pub-year-term' ).val();

			var pubYear = $( '#wpbooklist-search-pub_year' ).val();
			var pubYearDb = $( '#wpbooklist-search-pub_year' ).attr( 'data-dbfieldname' );

			var customtextfieldsnamearray = [];
			var customtextfieldsvaluesarray = [];
			$( '.wpbooklist-search-customfield-text' ).each( function(){ 

				customtextfieldsnamearray.push( $( this ).attr( 'data-dbfieldname' ) );
				customtextfieldsvaluesarray.push( $( this ).val() );

			});

			var customdropdownfieldsnamearray = [];
			var customdropdownfieldsvaluesarray = [];
			$( '.wpbooklist-search-customfield-dropdown' ).each( function(){ 

				customdropdownfieldsnamearray.push( $( this ).attr( 'data-dbfieldname' ) );
				customdropdownfieldsvaluesarray.push( $( this ).val() );

			});

			var searchinstring = ''
			var searchdbstring = ''

			var params = '';

			// Now start building URL
			if ( -1 < window.location.href.indexOf( 'searchby' ) ) {

				// If we're working with 'Plain Permalinks'.
				if ( -1 < window.location.href.indexOf( 'page_id=' ) ) {
					params = window.location.href.split( '&' );
					params = params[0] + '&searchby=';
				} else {
					params = window.location.href.split( '?' );
					params = params[0] + '?searchby=';
				}

			} else {
				// If we're working with 'Plain Permalinks'.
				if ( -1 < window.location.href.indexOf( 'page_id=' ) ) {
					params = window.location.href + '&searchby=';
				} else {
					params = window.location.href + '?searchby=';
				}
			}

			if ( null !== keywords && '' != keywords ) {
				keywords = keywords.replace(/,/g,'|');
				searchinstring = searchinstring + keywords + ',';
				searchdbstring = searchdbstring + keywordsDb + ',';
			}

			if ( null !== title && '' != title ) {
				title = title.replace(/,/g,'|');
				searchinstring = searchinstring + title + ',';
				searchdbstring = searchdbstring + titleDb + ',';
			}

			if ( null !== author && '' != author ) {
				author = author.replace(/,/g,'|');
				searchinstring = searchinstring + author + ',';
				searchdbstring = searchdbstring + authorDb + ',';
			}

			if ( null !== isbn && '' != isbn ) {
				isbn = isbn.replace(/,/g,'|');
				searchinstring = searchinstring + isbn + ',';
				searchdbstring = searchdbstring + isbnDb + ',';
			}

			if ( null !== publisher && '' != publisher ) {
				publisher = publisher.replace(/,/g,'|');
				searchinstring = searchinstring + publisher + ',';
				searchdbstring = searchdbstring + publisherDb + ',';
			}

			if ( null !== series && '' != series ) {
				series = series.replace(/,/g,'|');
				searchinstring = searchinstring + series + ',';
				searchdbstring = searchdbstring + seriesDb + ',';
			}

			if ( null !== language && '' != language ) {
				language = language.replace(/,/g,'|');
				searchinstring = searchinstring + language + ',';
				searchdbstring = searchdbstring + languageDb + ',';
			}

			if ( null !== format && 'default' !== format ) {
				format = format.replace(/,/g,'|');
				searchinstring = searchinstring + format + ',';
				searchdbstring = searchdbstring + formatDb + ',';
			}

			if ( null !== genres && 'default' !== genres ) {
				genres = genres.replace(/,/g,'|');
				searchinstring = searchinstring + genres + ',';
				searchdbstring = searchdbstring + genresDb + ',';
			}

			if ( null !== subgenre && 'default' !== subgenre ) {
				subgenre = subgenre.replace(/,/g,'|');
				searchinstring = searchinstring + subgenre + ',';
				searchdbstring = searchdbstring + subgenreDb + ',';
			}

			if ( null !== ratingYear && 'default' !== ratingYear ) {
				ratingYear = ratingYear.replace(/,/g,'|');
				searchinstring = searchinstring + ratingTerm + '-' + ratingYear + ',';
				searchdbstring = searchdbstring + ratingYearDb + ',';
			}

			if ( null !== pubYear && 'default' !== pubYear ) {
				pubYear = pubYear.replace(/,/g,'|');
				searchinstring = searchinstring + pubTerm + '-' + pubYear + ',';
				searchdbstring = searchdbstring + pubYearDb + ',';
			}

			for ( var i = customtextfieldsnamearray.length - 1; i >= 0; i-- ) {
				if ( '' !== customtextfieldsvaluesarray[i] ) {
					searchinstring = searchinstring + customtextfieldsvaluesarray[i] + ',';
					searchdbstring = searchdbstring + customtextfieldsnamearray[i] + ',';
				}
			}

			for ( var i = customdropdownfieldsnamearray.length - 1; i >= 0; i-- ) {
				if ( 'default' !== customdropdownfieldsvaluesarray[i] && null !== customdropdownfieldsvaluesarray[i] ) {
					searchinstring = searchinstring + customdropdownfieldsvaluesarray[i] + ',';
					searchdbstring = searchdbstring + customdropdownfieldsnamearray[i] + ',';
				}
			}

			searchdbstring = searchdbstring.replace(/,+$/,'');
			searchinstring = searchinstring.replace(/,+$/,'');


			if ( '' === searchdbstring || null === searchdbstring ) {
				params = '';
			} else {
				params = params + searchdbstring + '&searchvalues=' + searchinstring;
			}

			if ( '' !== sortBy && null !== sortBy && undefined !== sortBy && 'default' !== sortBy) {
				params = params + '&sortby=' + sortBy;
			}

			// Navigate to the new URL.
			window.location.href = params;

			
		});

	}

	function wpbooklistSearchPopulate(){

		if ( -1 < window.location.href.indexOf( 'searchby' ) ) {

			var url = decodeURIComponent(window.location.href);
			var origurl = decodeURIComponent(window.location.href);
			var searchby = [];
			var searchterm = [];
			var offset = 0;
			var sortby = '';
			url = url.split( '?' );
			url = url[1].split( '&' );

console.log('url')
console.log(url);
			if ( 2 === url.length ) {
				searchby = url[0].split( '=' );
				searchby = searchby[1].split( ',' );
				searchterm = url[1].split( '=' );
				searchterm = searchterm[1].split( ',' );
			} else {

				// If an offset is in play.
				if ( -1 < window.location.href.indexOf( 'offset' ) ) {
					offset = url[0].split( '=' );
					searchby = url[1].split( '=' );
					searchby = searchby[1].split( ',' );
					searchterm = url[2].split( '=' );
					searchterm = searchterm[1].split( ',' );
				} else {

					searchby = url[0].split( '=' );
					searchby = searchby[1].split( ',' );
					searchterm = url[1].split( '=' );
					searchterm = searchterm[1].split( ',' );
				}

				// Now get the sortby value.
				if ( -1 < window.location.href.indexOf( 'sortby=' ) ) {
					origurl = origurl.split( 'sortby=' );
					sortby = origurl[1];
					$( '#wpbooklist-search-sortby' ).val( sortby )
				}




				

				// Set the pagination option.
				if ( '' !== offset[1] & null !== offset[1] && undefined !== offset[1] && 0 < offset[1] ) {
					$( '#wpbooklist-search-pagination-middle-div-select' ).val( offset[1] )
				} else {
					$( '#wpbooklist-search-pagination-middle-div-select' ).val( 0 )
				}

			}

			for (var i = 0; i < searchby.length; i++ ) {

				searchterm[i] = searchterm[i].replace(/\|/g,',');

				if ( ( -1 < searchterm[i].indexOf( 'Before-' ) ) || ( -1 < searchterm[i].indexOf( 'Exactly-' ) ) || ( -1 < searchterm[i].indexOf( 'After-' ) )  ) {

					if ( -1 < searchterm[i].indexOf( 'Before-' ) ) {
						searchterm[i] = searchterm[i].split( 'Before-' );
						$( '#wpbooklist-search-pub-year-term' ).val( 'Before' );
					}

					if ( -1 < searchterm[i].indexOf( 'Exactly-' ) ) {
						searchterm[i] = searchterm[i].split( 'Exactly-' );
						$( '#wpbooklist-search-pub-year-term' ).val( 'Exactly' );
					}

					if ( -1 < searchterm[i].indexOf( 'After-' ) ) {
						searchterm[i] = searchterm[i].split( 'After-' );
						$( '#wpbooklist-search-pub-year-term' ).val( 'After' );
					}

					
					$( '#wpbooklist-search-' + searchby[i] ).val( searchterm[i][1] )

				} else {
					$( '#wpbooklist-search-' + searchby[i] ).val( searchterm[i] )
				}	


				if ( ( -1 < searchterm[i].indexOf( 'Greater-' ) ) || ( -1 < searchterm[i].indexOf( 'Less-' ) ) ) {

					if ( -1 < searchterm[i].indexOf( 'Greater-' ) ) {
						searchterm[i] = searchterm[i].split( 'Greater-' );
						$( '#wpbooklist-search-rating-year-term' ).val( 'Greater' );
					}

					if ( -1 < searchterm[i].indexOf( 'Less-' ) ) {
						searchterm[i] = searchterm[i].split( 'Less-' );
						$( '#wpbooklist-search-rating-year-term' ).val( 'Less' );
					}

					

					
					$( '#wpbooklist-search-' + searchby[i] ).val( searchterm[i][1] )

				} else {
					$( '#wpbooklist-search-' + searchby[i] ).val( searchterm[i] )
				}







			}

		}

	}

	// Function to reset the drop-down selections to the default disabled values.
	function wpbooklistSearchResetDropdowns(){

		// When the Search form is submitted/the Search button is clicked
		$( '.wpbooklist-search-reset' ).on( 'click', function() {


			$('.wpbooklist-search-right-fields-row').find( 'select' ).val( 'default' );


/*
			var idtoreset = $(this).attr('data-idtoreset');
			var pub = [];

			if ( -1 < idtoreset.indexOf( 'termpluswpbooklist' ) ) {

				pub = idtoreset.split( 'plus' );
				$( '#' + pub[0] ).val( 'default' );
				$( '#' + pub[1] ).val( 'default' );

			} else {
				$( '#' + idtoreset ).val( 'default' );
			}

*/

		});
	}

	// Function to reset the text field selections to the default empty values.
	function wpbooklistSearchResetTextFields(){

		// When the Search form is submitted/the Search button is clicked
		$( '#wpbooklist-search-submit-search-div' ).on( 'click', function() {

			var url = '';
			
			if ( -1 < window.location.href.indexOf( 'searchby' ) ) {
				if ( -1 < window.location.href.indexOf( 'page_id=' ) ) {
					url = window.location.href.split( '&' );
					window.location.href = url[0];
				} else {
					url = window.location.href.split( '?' );
					window.location.href = url[0];
				}
			}
		});
	}



	




});
